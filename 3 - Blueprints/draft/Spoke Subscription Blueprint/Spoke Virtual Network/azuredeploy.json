{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Resource name for the spoke Virtual Network"
      }
    },
    "vnetAddressRange": {
      "type": "string",
      "metadata": {
        "description": "Virtual Network address range"
      }
    },
    "defaultSubnetAddressRange": {
      "type": "string",
      "metadata": {
        "description": "Default subnet address range"
      }
    },
    "applicationSubnetAddressRange": {
      "type": "string",
      "metadata": {
        "description": "Application subnet address range"
      }
    },
    "databaseSubnetAddressRange": {
      "type": "string",
      "metadata": {
        "description": "Database subnet address range"
      }
    },
    "privateDnsZoneName": {
      "type": "string",
      "metadata": {
        "description": "Private DNS Zone with link to virtual network"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location in which the resources will be deployed"
      }
    }
  },
  "variables": {
    "namingPrefix": "",
    "namingSuffix": "",
    "vnetName": "[concat(variables('namingPrefix'), parameters('virtualNetworkName'), variables('namingSuffix'))]",
    "networkSecurityGroups": [
      {
        "name": "infrastructure-nsg",
        "rules": []
      },
      {
        "name": "application-nsg",
        "rules": []
      },
      {
        "name": "database-nsg",
        "rules": []
      }
    ],
    "userDefinedRoutes": [
      {
        "name": "infrastructure-udr",
        "routes": [
          {
            "name": "DirectRouteToKMS",
            "properties": {
              "addressPrefix": "23.102.135.246/32",
              "nextHopType": "Internet"
            }
          }
        ]
      },
      {
        "name": "application-udr",
        "routes": []
      },
      {
        "name": "database-udr",
        "routes": []
      }
    ],
    "vnetSubnets": [
      {
        "name": "DefaultSubnet",
        "addressRange": "[parameters('defaultSubnetAddressRange')]",
        "networkSecurityGroup": "[variables('networkSecurityGroups')[0].name]",
        "userDefinedRoute": "[variables('userDefinedRoutes')[0].name]",
        "serviceEndpoints": []
      },
      {
        "name": "ApplicationSubnet",
        "addressRange": "[parameters('applicationSubnetAddressRange')]",
        "networkSecurityGroup": "[variables('networkSecurityGroups')[1].name]",
        "userDefinedRoute": "[variables('userDefinedRoutes')[1].name]",
        "serviceEndpoints": []
      },
      {
        "name": "DatabaseSubnet",
        "addressRange": "[parameters('databaseSubnetAddressRange')]",
        "networkSecurityGroup": "[variables('networkSecurityGroups')[2].name]",
        "userDefinedRoute": "[variables('userDefinedRoutes')[2].name]",
        "serviceEndpoints": []
      }
    ]
  },
  "resources": [
    {
      "apiVersion": "2019-04-01",
      "name": "[variables('networkSecurityGroups')[copyIndex()].name]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Network Security Groups []"
      },
      "copy": {
        "count": "[length(variables('networkSecurityGroups'))]",
        "name": "nsgLoop"
      },
      "properties": {
        "copy": [
          {
            "name": "securityRules",
            "count": "[length(variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules)]",
            "input": {
              "name": "[variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].name]",
              "properties": {
                "access": "[variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.access]",
                "priority": "[int(variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.priority)]",
                "direction": "[variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.direction]",
                "protocol": "[variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.protocol]",
                "sourceAddressPrefix": "[if(equals(variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), json('null'), variables('networkSecurityGroups')[copyIndex()].rules[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                "sourceAddressPrefixes": "[if(equals(length(variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.sourceAddressPrefixes), 0), json('null'), variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.sourceAddressPrefixes)]",
                "sourcePortRange": "[variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.sourcePortRange]",
                "sourcePortRanges": "[if(equals(length(variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.sourcePortRanges), 0), json('null'), variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.sourcePortRanges)]",
                "destinationPortRange": "[if(equals(variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.destinationPortRange, ''), json('null'), variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.destinationPortRange)]",
                "destinationPortRanges": "[if(equals(length(variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.destinationPortRanges), 0), json('null'), variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.destinationPortRanges)]",
                "destinationAddressPrefix": "[if(equals(variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), json('null'), variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                "destinationAddressPrefixes": "[if(equals(length(variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), json('null'), variables('networkSecurityGroups')[copyIndex('nsgLoop')].rules[copyIndex('securityRules')].properties.destinationAddressPrefixes)]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2019-04-01",
      "name": "[variables('userDefinedRoutes')[copyIndex()].name]",
      "type": "Microsoft.Network/routeTables",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "User Defined Routes []"
      },
      "copy": {
        "name": "udrLoop",
        "count": "[length(variables('userDefinedRoutes'))]"
      },
      "properties": {
        "routes": "[variables('userDefinedRoutes')[copyIndex()].routes]",
        "disableBgpRoutePropagation": false
      }
    },
    {
      "apiVersion": "2019-04-01",
      "name": "[variables('vnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Spoke Virtual Network"
      },
      "dependsOn": [
        "nsgLoop",
        "udrLoop"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressRange')]"
          ]
        },
        "enableDdosProtection": false,
        "ddosProtectionPlan": "[json('null')]",
        "copy": [
          {
            "name": "subnets",
            "count": "[length(variables('vnetSubnets'))]",
            "input": {
              "name": "[variables('vnetSubnets')[copyIndex('subnets')].name]",
              "properties": {
                "addressPrefix": "[variables('vnetSubnets')[copyIndex('subnets')]['addressRange']]",
                "networkSecurityGroup": "[if(equals(variables('vnetSubnets')[copyIndex('subnets')].networkSecurityGroup, ''), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/networkSecurityGroups', variables('vnetSubnets')[copyIndex('subnets')].networkSecurityGroup), '\"}')))]",
                "routeTable": "[if(equals(variables('vnetSubnets')[copyIndex('subnets')].userDefinedRoute, ''), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/routeTables', variables('vnetSubnets')[copyIndex('subnets')].userDefinedRoute), '\"}')))]",
                "serviceEndpoints": "[if(equals(length(variables('vnetSubnets')[copyIndex('subnets')].serviceEndpoints), 0), json('null'), variables('vnetSubnets')[copyIndex('subnets')].serviceEndpoints)]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-09-01",
      "name": "[parameters('privateDnsZoneName')]",
      "type": "Microsoft.Network/privateDnsZones",
      "location": "global",
      "tags": {
        "displayName": "Private DNS Zone"
      },
      "properties": {}
    },
    {
      "apiVersion": "2018-09-01",
      "name": "[concat(parameters('privateDnsZoneName'), '/', variables('vnetName'), '-link')]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "location": "global",
      "tags": {
        "displayName": "DNS Virtual Network Link"
      },
      "dependsOn": [
        "[parameters('privateDnsZoneName')]"
      ],
      "properties": {
        "registrationEnabled": true,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        }
      }
    }
  ],
  "outputs": {
    "azureSubscription": {
      "type": "object",
      "value": "[subscription()]"
    },
    "virtualNetwork": {
      "type": "object",
      "value": "[reference(variables('vnetName'))]"
    }
  }
}
